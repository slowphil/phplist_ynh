#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
with_mysql=$(ynh_app_setting_get --app=$app --key=with_mysql)
password=$(ynh_app_setting_get --app=$app --key=password)

#admin_mail_html=$(ynh_app_setting_get --app=$app --key=admin_mail_html)

db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
skipped_uris=$(ynh_app_setting_get --app=$app --key=skipped_uris)
admin=$(ynh_app_setting_get --app=$app --key=admin)
orga=$(ynh_app_setting_get --app=$app --key=org)


fpm_footprint=$(ynh_app_setting_get --app=$app --key=fpm_footprint)
fpm_usage=$(ynh_app_setting_get --app=$app --key=fpm_usage)

#=================================================
# CHECK VERSION
#=================================================

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

#
# N.B. : the followings setting migrations snippets are provided as *EXAMPLES*
# of what you may want to do in some cases (e.g. a setting was not defined on
# some legacy installs and you therefore want to initiaze stuff during upgrade)
#

# If db_name doesn't exist, create it
#if [ -z "$db_name" ]; then
#	db_name=$(ynh_sanitize_dbid --db_name=$app)
#	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
#fi

# If final_path doesn't exist, create it
#if [ -z "$final_path" ]; then
#	final_path=/var/www/$app
#	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
#fi

### If nobody installed your app before 4.1,
### then you may safely remove these lines

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

if ! ynh_permission_exists --permission="admin"; then
	# Create the required permissions
	ynh_permission_create --permission="admin" --url="/admin" --allowed=$admin
fi

# Create a permission if needed
if ! ynh_permission_exists --permission="api"; then
	ynh_permission_create --permission="api" --url "/api" --allowed="visitors" --show_tile="false" --protected="true"
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."  --weight=3

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# the install script to run should be that of the updated phplist_ynh !!!
# this one is not garantied to work. 
# It's probably safer to backup db and settings, remove app, install fresh (newer) app and restore db and settings.

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."  --weight=20

	# Download, check integrity, uncompress and patch the source from app.src
unpackdir="/tmp/phplist_src"
if [ -d $unpackdir ]
then
    ynh_secure_remove $unpackdir
fi 
mkdir $unpackdir
ynh_setup_source --dest_dir=$unpackdir

mkdir -p "$final_path"

# Copy files to the right place
# We do not clean the destination so that any additional plugin remains installed
cp -R "$unpackdir/public_html/lists" "$final_path/"

ynh_secure_remove $unpackdir

# use extended config file

mv "$final_path/lists/config/config_extended.php" "$final_path/lists/config/config.php"

#change config parameters for yunohost, disable built-in trackers
# fix ui for visitors, fix display of captcha images
# see details in install script @ https://github.com/slowphil/phplist_ynh/commit/83e5d21b4dae10acf67da1a6212229ad698057a4
cd $final_path/lists
patch -i /$YNH_CWD/../sources/patches/patch_phplist.diff -p1

#make soft links (can't make them by patching)
if [ ! -L $final_path/lists/admin/images/powerphplist.png ] ; then
  ln -sr $final_path/lists/admin/images/power-phplist.png  $final_path/lists/admin/images/powerphplist.png
fi
if [ ! -L $final_path/lists/ui ] ; then
  ln -sr admin/ui ui
fi
if [ ! -L $final_path/lists/js/phplistapp.js ] ; then
  ln -sr admin/js/phplistapp.js js/phplistapp.js
fi

#remove updater code (updates handled by phplist_ynh)
ynh_secure_remove "$final_path/lists/updater"

# suppress remnants of old interface no longer fully supported
ynh_secure_remove "$final_path/lists/admin/.minceconf"

# API
if true; then
  # API is disabled by default, just suppress the corresponding code
  ynh_secure_remove base # that's the API
  ynh_secure_remove api.php
else
  # OTOH, if one needs the API, should enable it -- see https://www.phplist.org/manual/books/phplist-manual/page/api-and-integrations
  # WARNING : untested
  ynh_replace_string --match_string="{ view_response_listener: { enabled: false } }" --replace_string="{ view_response_listener: { enabled: true } }" --target_file="base/config/config_modules.yml"
fi

if [ "$language" != "en" ]; then
  ynh_replace_string --match_string="\$default_system_language = 'en';" --replace_string="\$default_system_language = '$language';" --target_file="$final_path/lists/config/config.php"
fi 

if [ "$language" = "fr" ]; then
  ynh_replace_string --match_string="\$language_module = 'english.inc';" --replace_string="\$language_module = 'french.inc';" --target_file="$final_path/lists/config/config.php"
  #fix many untranslated texts
  patch -i /$YNH_CWD/../sources/patches/defaultconfig-fr.diff $final_path/lists/admin/defaultconfig.php
  patch -i /$YNH_CWD/../sources/patches/lib-fr.diff $final_path/lists/admin/lib.php
    #the patch applies to our already modified file!
  patch -i /$YNH_CWD/../sources/patches/CaptchaPlugin-fr.diff $final_path/lists/admin/plugins/CaptchaPlugin.php
fi 
 
ynh_setup_source --dest_dir="$final_path/lists/securimage" --source_id="securimage"

#fix securimage for captcha plugin -- see https://resources.phplist.com/plugin/captcha#change_to_the_securimage_code
ynh_replace_string --match_string="public \$session_name   = null;" --replace_string="public \$session_name   = 'phpListSession';" --target_file="$final_path/lists/securimage/securimage.php"

cd $YNH_CWD
fi


#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."  --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=5

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=3

# Create a dedicated PHP-FPM config
ynh_add_fpm_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# ...
#=================================================

#=================================================
# SETUP SYSTEMD
#=================================================

#=================================================
# MODIFY A CONFIG FILE
#=================================================

### Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
### And create a backup of this file if the checksum is different. So the file will be backed up if the admin had modified it.
ynh_backup_if_checksum_is_different --file="$final_path/lists/config/config.ph"

# adjust config files
# the replacements we perform here were working for the version intitially packaged; they are not garantied to work for later version...

if [ "$path_url" = "/" ] ; then
  ynh_replace_string --match_string="\$pageroot = '/lists';" --replace_string="\$pageroot = '';" --target_file="$final_path/lists/config/config.php"
else
  ynh_replace_string --match_string="\$pageroot = '/lists';" --replace_string="\$pageroot = '$path_url';" --target_file="$final_path/lists/config/config.php"
fi

ynh_replace_string --match_string="dbhost" --replace_string="localhost" --target_file="$final_path/lists/config/config.php"
ynh_replace_string --match_string="phplistdb" --replace_string="${db_name}" --target_file="$final_path/lists/config/config.php"
ynh_replace_string --match_string="\$database_user = 'phplist';" --replace_string="\$database_user = '${db_user}';" --target_file="$final_path/lists/config/config.php"
ynh_replace_string --match_string="\$database_password = 'phplist';" --replace_string="\$database_password = '${db_pwd}';" --target_file="$final_path/lists/config/config.php"

#  customize for distiguishing possible multiple instances
ynh_replace_string --match_string="\$GLOBALS['installation_name'] = 'phpList';" --replace_string="\$GLOBALS['installation_name'] = '${app}';" --target_file="$final_path/lists/admin/init.php"   

# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$final_path/lists/config/config.php"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R root: $final_path


#=================================================
# SETUP LOGROTATE
#=================================================
#ynh_script_progression --message="Upgrading logrotate configuration..." --time --weight=1

# Use logrotate to manage app-specific logfile(s)
#ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================

#=================================================
# START SYSTEMD SERVICE
#=================================================

#=================================================
# UPGRADE FAIL2BAN
#=================================================
#ynh_script_progression --message="Reconfiguring Fail2Ban..." --weight=1

# Create a dedicated Fail2Ban config
#TODO!
#ynh_add_fail2ban_config --logpath="/var/log/nginx/${domain}-error.log" --failregex="Regex to match into the log for a failed login"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
